#!/usr/bin/env ruby

require 'rubygems'
require 'commander/import'
require 'ruby-progressbar'
require_relative '../lib/experiment'
require 'rugged'
require 'thwait'
require "colorize"
require 'tmpdir'

program :name, 'experiment'
program :version, Experiment::VERSION
program :description, 'A tool for running concurrent multi-configuration experiments'

command :run do |c|
	c.syntax = 'experiment run'
	c.summary = 'Run the experiments outlined in experiment.json'
	c.option '-r', '--repository FILE', String, 'override location of source code'
	c.option '-o', '--output DIR', String, 'override location of experiment output'
	c.action do |args, options|
		begin
			config = Experiment::read_config Dir.pwd
		rescue Exception => er
			raise ArgumentError.new er.message
		end

		if options.output
			if File.exist? options.output
				raise ArgumentError.new "Output directory #{options.output} already exists; exiting."
			end
			FileUtils.mkdir_p options.output
			Dir.chdir options.output
		end

		repository = (options.repository ||
					  config["repository"].gsub("~", Dir.home))
		repo = Rugged::Repository.new(repository)

		# Create list of versions, organized by build
		build_versions = Hash.new { |hash,key| hash[key] = {} }
		config["versions"].each do |vname, version|
			app = Experiment::Application.new(:wd => Dir.pwd + "/" + vname,
								      :config => config,
								      :version => version,
								      :repo => repo)
			build_versions[app.build][vname] = app
		end

		# Build each distinct build, then use it to initialize the relevant
		# versions.
		build_versions.each do |build, versions|
			Dir.mktmpdir do |build_dir|
				build.build(build_dir)
				versions.each do |vname, a|
					a.copy_build(vname, build_dir)
				end
			end
		end

		ops = []
		for n in 1..config["iterations"] do
			iops = []
			build_versions.values.each do |versions|
				versions.each do |vname, a|
					iops << [vname, a, n]
				end
			end
			# to improve time estimation, run versions in random
			# order while ensuring all versions within an iteration
			# are run before the next iteration is started.
			iops.shuffle!
			ops << iops
		end
		ops.flatten! 1

		running = 0
		threads = []
		twait = nil
		puts "==> All versions ready, starting experiment".bold
		p = ProgressBar.create :total => ops.count, :format => "Progress: [%B] %p%% %E "

		Signal.trap("TERM") do
			Experiment.stop
		end
		Signal.trap("INT") do
			Experiment.stop
		end

		for op in ops do
			break if Experiment.stopped

			vname, a, n = *op
			if running >= config["parallelism"]
				begin
					t = twait.next_wait
				rescue
					# woken up by a signal
					break
				end
				p.increment
				threads.delete t
			end

			break if Experiment.stopped

			threads << Thread.new(vname, a, n) do |vname, a, n|
				begin
					a.run(n)
				rescue Exception => er
					STDERR.puts "internal error while running version #{vname}: #{er}"
				end
			end
			twait = ThreadsWait.new *threads
			running += 1
		end
		twait.all_waits { p.increment }
		puts "==> Stopped experimenting after user interrupt".bold if Experiment.stopped
	end
end

command :init do |c|
	c.syntax = 'experiment init'
	c.summary = 'Create a fresh experiment.json'
	#c.description = ''
	#c.example 'description', 'command example'
	#c.option '--some-switch', 'Some switch that does something'
	c.action do |args, options|
		file = "experiment.json"
		description = ask 'Describe your experiment: '
		repo = ask 'Where is the source repository located: '
		checkout = ask 'What commit do you want to base the experiment on? '
		iterations = ask 'Number of iterations for each version: '
		parallelism = ask 'Number of parallel executions: '
		versions = ask_for_array 'List the versions you wish to create: '
		begin
			File.open(file, 'w') do |f|
				f.write <<-"..."
{
	"experiment": "#{description}",
	"repository": "#{repo}",
	"checkout": "#{checkout}",
	"iterations": #{iterations},
	"parallelism": #{parallelism},
	"build": "make",
	"arguments": [ ],
	"versions": {
				...
				versions.each do |version|
					f.write <<-"..."
		"#{version}": {
		}
					...
				end
				f.write <<-"..."
	}
}
				...
			end
		end
		say "experiment.json created, now configure your versions and the execution command"
	end
end

default_command :run
