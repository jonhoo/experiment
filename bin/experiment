#!/usr/bin/env ruby

require 'rubygems'
require 'commander/import'
require 'ruby-progressbar'
require 'experiment'
require 'rugged'
require 'thwait'
require "colorize"

program :name, 'experiment'
program :version, Experiment::VERSION
program :description, 'A tool for running concurrent multi-configuration experiments'

command :run do |c|
	c.syntax = 'experiment run'
	c.summary = 'Run the experiments outlined in experiment.json'
	#c.description = ''
	#c.example 'description', 'command example'
	#c.option '--some-switch', 'Some switch that does something'
	c.action do |args, options|
		begin
			config = Experiment::read_config Dir.pwd
		rescue Exception => er
			raise ArgumentError.new er.message
		end

		config["repository"]  = config["repository"].gsub("~", Dir.home)
		repo = Rugged::Repository.new(config["repository"])

		versions = {}
		config["versions"].each do |vname, version|
			Dir.mkdir vname
			versions[vname] = Experiment::Application.new(:wd => Dir.pwd + "/" + vname,
								      :config => config,
								      :version => version,
								      :repo => repo)
			versions[vname].build vname
		end

		ops = []
		for n in 0..config["iterations"] do
			versions.each do |vname, a|
				ops << [vname, a, n+1]
			end
		end

		running = 0
		threads = []
		twait = nil
		puts "==> All versions ready, starting experiment".bold
		p = ProgressBar.create :total => ops.count, :format => "Progress: [%B] %p%% %E "
		for op in ops do
			vname, a, n = *op
			if running >= config["parallelism"]
				t = twait.next_wait
				p.increment
				threads.delete t
			end

			threads << Thread.new(vname, a, n) do |vname, a, n|
				a.run(n)
			end
			twait = ThreadsWait.new *threads
			running += 1
		end
		twait.all_waits { p.increment }
	end
end

command :init do |c|
	c.syntax = 'experiment init'
	c.summary = 'Create a fresh experiment.json'
	#c.description = ''
	#c.example 'description', 'command example'
	#c.option '--some-switch', 'Some switch that does something'
	c.action do |args, options|
		file = "experiment.json"
		description = ask 'Describe your experiment: '
		repo = ask 'Where is the source repository located: '
		checkout = ask 'What commit do you want to base the experiment on? '
		iterations = ask 'Number of iterations for each version: '
		parallelism = ask 'Number of parallel executions: '
		versions = ask_for_array 'List the versions you wish to create: '
		begin
			File.open(file, 'w') do |f|
				f.write <<-"..."
{
	"experiment": "#{description}",
	"repository": "#{repo}",
	"checkout": "#{checkout}",
	"iterations": #{iterations},
	"parallelism": #{parallelism},
	"build": "make",
	"arguments": [ ],
	"versions": {
				...
				versions.each do |version|
					f.write <<-"..."
		"#{version}": {
		}
					...
				end
				f.write <<-"..."
	}
}
				...
			end
		end
		say "experiment.json created, now configure your versions and the execution command"
	end
end

default_command :run
