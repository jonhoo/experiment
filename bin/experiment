#!/usr/bin/env ruby

require 'rubygems'
require 'commander/import'
require 'ruby-progressbar'
require 'experiment'
require 'rugged'
require 'thwait'

program :name, 'experiment'
program :version, Experiment::VERSION
program :description, 'A tool for running concurrent multi-configuration experiments'

command :run do |c|
	c.syntax = 'experiment run [options]'
	c.summary = 'Run the experiments outlined in experiment.json'
	#c.description = ''
	#c.example 'description', 'command example'
	#c.option '--some-switch', 'Some switch that does something'
	c.action do |args, options|
		begin
			config = Experiment::read_config Dir.pwd
		rescue Exception => er
			raise ArgumentError.new er.message
		end

		config["repository"]  = config["repository"].gsub("~", Dir.home)
		repo = Rugged::Repository.new(config["repository"])

		versions = {}
		config["versions"].each do |vname, version|
			Dir.mkdir vname
			versions[vname] = Experiment::Application.new(:wd => Dir.pwd + "/" + vname,
								      :config => config,
								      :version => version,
								      :repo => repo)
			versions[vname].build vname
		end

		ops = []
		for n in 0..config["iterations"] do
			versions.each do |vname, a|
				ops << [vname, a, n]
			end
		end

		running = 0
		threads = []
		twait = nil
		p = ProgressBar.create :total => ops.count, :format => "Progress: [%B] %p%% %E "
		for op in ops do
			vname, a, n = *op
			if running >= config["parallelism"]
				t = twait.next_wait
				p.increment
				threads.delete t
			end

			threads << Thread.new { a.run(n) }
			twait = ThreadsWait.new *threads
			running += 1
		end
		twait.all_waits { p.increment }
	end
end
default_command :run
